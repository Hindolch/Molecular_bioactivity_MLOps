name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run unit tests
        run: pytest tests/test_inferencing.py
        
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/chemical_image4:latest
            ${{ secrets.DOCKER_USERNAME }}/chemical_image4:${{ github.sha }}
      
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}  # Add Gemini API secret here
        run: |
          curl -X POST "https://api.render.com/v1/services/srv-clj8b0gph6c73387s0t0/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" || exit 1
          
          # Here you can add any step to interact with the Gemini API, for example:
          # curl -X POST -H "Authorization: Bearer $GEMINI_API_KEY" ...  # Example for using Gemini API.
